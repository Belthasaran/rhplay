// Auto-generated from update_c_tilemap.py
// Generated: 2025-10-30 04:14:02Z
// Forward: TILE_TO_ASCII[0x00..0xFF] -> ASCII byte (0 if unmapped)
// Reverse: ASCII_TO_TILE[0x00..0xFF] -> preferred tile code (0xFF if unmapped)
// Note: Multiple tile codes may map to the same ASCII; reverse table picks the first.

#ifndef DEFAULT_TILE_MAP_H
#define DEFAULT_TILE_MAP_H

#include <stdint.h>

static const uint8_t TILE_TO_ASCII[256] = {
    /* 0x00-0x0F */ 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
    /* 0x10-0x1F */ 'Q','R','S','T','U','V','W','X','Y','Z','!','.','-',',','?',' ',
    /* 0x20-0x2F */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0x30-0x3F */ 0,0,'I','L','L','U','S','I','Y','E','L','O','W','?',0,'!',
    /* 0x40-0x4F */ 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
    /* 0x50-0x5F */ 'q','r','s','t','u','v','w','x','y','z','#','(',')','\'',0,0,
    /* 0x60-0x6F */ 0,0,0,'1','2','3','4','5','6','7','8','9','0',0,0,0,
    /* 0x70-0x7F */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0x80-0x8F */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0x90-0x9F */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xA0-0xAF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xB0-0xBF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xC0-0xCF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xD0-0xDF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xE0-0xEF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    /* 0xF0-0xFF */ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};

static const uint8_t ASCII_TO_TILE[256] = {
    /* 0x00-0x0F */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0x10-0x1F */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0x20-0x2F */ 0x1F,0x1A,0xFF,0x5A,0xFF,0xFF,0xFF,0x5D,0x5B,0x5C,0xFF,0xFF,0x1D,0x1C,0x1B,0xFF,
    /* 0x30-0x3F */ 0x6C,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0xFF,0xFF,0xFF,0xFF,0xFF,0x1E,
    /* 0x40-0x4F */ 0xFF,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
    /* 0x50-0x5F */ 0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0x60-0x6F */ 0xFF,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,
    /* 0x70-0x7F */ 0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0x80-0x8F */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0x90-0x9F */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xA0-0xAF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xB0-0xBF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xC0-0xCF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xD0-0xDF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xE0-0xEF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    /* 0xF0-0xFF */ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
};

static inline uint8_t tile_to_ascii_byte(uint8_t tileCode) {
    return TILE_TO_ASCII[tileCode];
}

static inline uint8_t ascii_byte_to_tile(uint8_t asciiByte) {
    return ASCII_TO_TILE[asciiByte];
}

#endif // DEFAULT_TILE_MAP_H
